---
title: "Problem Set #02"
author: Xi Du
format: pdf
editor: visual
---

## Problem 1 - Dice Game

Let\'s play a dice game. It costs \$2 to play. You roll a single 6-sided die.

-   On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins \$4).

-   On a roll of 1, 3, or 5, you lose.

We\'re going to implement this in different ways. Each function takes in as input the number of dice to roll, and each function returns your total winnings or loses. E.g.

\> play_dice(10)

\[1\] 4

\> play_dice(10)

\[1\] -6

a\.

-   Version 1: Implement this game using a loop over the die rolls.

    ```{r}
    play_dice <- function(num_dice){
      total_winnings <- 0
      for (i in 1:num_dice){
        roll <- sample(1:6,1) # Roll a 6-sided die
        if(roll %% 2 == 0){
          total_winnings <- total_winnings + roll
        } else {
          total_winnings <- total_winnings - 2 
        }
      }
      return(total_winnings)
    }
    ```

-   Version 2: Implement this game using built-in R vectorized functions.

    ```{r}
    play_dice_vectorized <- function(num_dice){
      rolls <- sample(1:6, num_dice, replace = TRUE)
      even_winnings <- sum(rolls[rolls %% 2 == 0])
      odd_loses <- length(rolls[rolls %% 2 == 1])*2
      total_winning <- even_winnings - odd_loses
      return(total_winning)
    }
    ```

-   Version 3: Implement this by collapsing the die rolls into a single `table()`. (Hint: Be careful indexing the table - what happens if you make a table of 5 dice rolls? You may need to look to other resources for how to solve this.)

    ```{r}
    play_dice_table <- function(num_dice){
      rolls <- sample(1:6, num_dice, replace = TRUE)
      rolls_factor <- factor(rolls, levels = 1:6)
      roll_table <- table(rolls_factor)
      
      names(roll_table) <- as.numeric(names(roll_table))
      even_indices <- as.numeric(names(roll_table)) %% 2 == 0
      odd_indices <- !even_indices
      even_winnings <- sum(as.numeric(names(roll_table)[even_indices]) * roll_table[even_indices])
      odd_losses <- sum(roll_table[odd_indices] * 2)  
      
      total_winnings <- even_winnings - odd_losses
      return(total_winnings)
    }
    ```

-   Version 4: Implement this game by using one of the \"`apply`\" functions.

    ```{r}
    play_dice_sapply <- function(num_dice){
      rolls <- sample(1:6, num_dice, replace = TRUE)
      compute_winning <- function(roll){
        if(roll %% 2 == 0){
          return(roll)
      } else {
          return(-2)
        }
      }
      winnings <- sapply(rolls, compute_winning)
      total_winnings <- sum(winnings)
      return(total_winnings)
    }
    ```

b.  Demonstrate that all versions work. Do so by running each a few times, once with an input a 3, and once with an input of 3000.

    ```{r}
    cat("Loop version with 3 dice:", play_dice(3), "\n")
    cat("Vectorized version with 3 dice:", play_dice_vectorized(3), "\n")
    cat("Table version with 3 dice:", play_dice_table(3), "\n")
    cat("Sapply version with 3 dice:", play_dice_sapply(3), "\n")

    ```

    ```{r}
    cat("Loop version with 3000 dice:", play_dice(3000), "\n")
    cat("Vectorized version with 3000 dice:", play_dice_vectorized(3000), "\n")
    cat("Table version with 3000 dice:", play_dice_table(3000), "\n")
    cat("Sapply version with 3000 dice:", play_dice_sapply(3000), "\n")

    ```

c.  Demonstrate that the four versions give the same result. Test with inputs 3 and 3000. (You may need to add a way to control the randomization.)

    ```{r}
    set.seed(123)
    cat("Loop version with 3 dice:", play_dice(3), "\n")
    set.seed(123)
    cat("Vectorized version with 3 dice:", play_dice_vectorized(3), "\n")
    set.seed(123)
    cat("Table version with 3 dice:", play_dice_table(3), "\n")
    set.seed(123)
    cat("Sapply version with 3 dice:", play_dice_sapply(3), "\n")


    ```

    ```{r}
    set.seed(123)
    cat("Loop version with 3 dice:", play_dice(3000), "\n")
    set.seed(123)
    cat("Vectorized version with 3 dice:", play_dice_vectorized(3000), "\n")
    set.seed(123)
    cat("Table version with 3 dice:", play_dice_table(3000), "\n")
    set.seed(123)
    cat("Sapply version with 3 dice:", play_dice_sapply(3000), "\n")


    ```

d.  Use the *microbenchmark* package to clearly demonstrate the speed of the implementations. Compare performance with a low input (100) and a large input (10000). Discuss the results

    ```{r}
    # For 100 dice rolls
    library(microbenchmark)
    mb_100 <- microbenchmark(
      loop_version = play_dice(100),
      vectorized_version = play_dice_vectorized(100),
      table_version = play_dice_table(100),
      sapply_version = play_dice_sapply(100),
      times = 1000  # Number of times to run each function
    )

    # For 10000 dice rolls
    mb_10000 <- microbenchmark(
      loop_version = play_dice(10000),
      vectorized_version = play_dice_vectorized(10000),
      table_version = play_dice_table(10000),
      sapply_version = play_dice_sapply(10000),
      times = 1000  
    )
    print(mb_100, unit="ms")  # Results in milliseconds for 100 dice rolls
    print(mb_10000, unit="ms")  # Results in milliseconds for 10000 dice rolls

    ```

    Discussion:

    -   **Loop vs. Vectorized**: Typically, the vectorized version should be faster than the loop version because R is optimized for vectorized operations. Loops in R are generally slower.

    -   **Table vs. Vectorized**: The table version almost has the same speed with the vertorized version. However, for larger inputs, the table is much quicker.

    -   **sapply vs. Vectorized**: The performance of **`sapply`** can be comparable to the vectorized version, but it might be slightly slower due to the overhead of applying a function over each element.

    -   **Overall**: For larger inputs, the differences in performance between the methods might become more evident. The table version is expected to be among the fastest, while the loop version might be the slowest.

e.  Do you think this is a fair game? Defend your decision with evidence based upon a Monte Carlo simulation.

    -   A game is considered "fair" if the expected value of the game is zero, meaning that in the long run, neither the player nor the house has an advantage.

    ```{r}
    # Using the table function for simulation
    monte_carlo_simulation <- function(num_simulations) {
      results <- replicate(num_simulations, play_dice_table(1))
      return(mean(results))
    }

    # Simulate the game 1,000,000 times
    set.seed(123)  # For reproducibility
    expected_value <- monte_carlo_simulation(1e6)

    cat("Expected Value:", expected_value, "\n")

    ```

-   Given the result of **`expected_value = 0.99`**, this means that on average, a player is expected to win approximately \$0.99 every time they play.

-   The game is biased in favor of the player. On average, a player is expected to win approximately \$0.99 to \$1 every time they play, making it an unfair game that advantages the player over the house.

    ## Problem 2 - Linear Regression

Download the cars data set available at <https://corgis-edu.github.io/corgis/csv/cars/>. The goal is to examine the relationship between horsepower and highway gas mileage.

a.  The names of the variables in this data are way too long. Rename the columns of the data to more reasonable lengths.

    ```{r}
    data <- read.csv("cars.csv", header = TRUE)
    names(data)[c(1:18)] <- c("Height","Length","Width","Driveline","EngineType","Hybrid","#ofForwardGears","Transimission","CityMpg","FuelType","MPG","Class","ID","Make","Model","Year","Horsepower","Torque")
    ```

b.  Restrict the data to cars whose Fuel Type is \"Gasoline\".

    ```{r}

    data <- data[data$FuelType == "Gasoline", ]
    ```

c.  Fit a linear regression model predicting MPG on the highway. The predictor of interest is horsepower. Control for:

    -   The torque of the engine

    -   All three dimensions of the car

    -   The year the car was released, as a categorical variable.

    Briefly discuss the estimated relationship between horsepower and highway MPG. Be precise about the interpretation of the estimated coefficient.

    ```{r}
    data$Year <- as.factor(data$Year)
    model <- lm(MPG ~ Horsepower + Torque + Height + Length + Width + Year, data = data)
    summary(model)

    ```

    The coefficient for **`Horsepower`** is 0.0163556. This means that for every one-unit increase in horsepower, the highway MPG is expected to increase by approximately 0.01636 units, holding all other variables constant.

    This relationship is statistically significant at a very high level, as indicated by the p-value (7.96e-13) which is much less than 0.05.

d.  It seems reasonable that there may be an interaction between horsepower and torque. Refit the model (with `lm`) and generate an interaction plot, showing how the relationship between horsepower and MPG changes as torque changes. Choose reasonable values of horsepower, and show lines for three different reasonable values of torque.

    (Hint: If you choose to use the *interactions* package for this, look at the `at =` argument to help with how year comes into play - choose a reasonable single value for year.

    ```{r}
    #Refit the model with interaction term
    model_interaction <- lm(MPG ~ Horsepower * Torque + Height + Length + Width + Year, data = data)
    summary(model_interaction)
    ```

    ```{r}
    library(interactions)
    torque_values <- quantile(data$Torque, probs = c(0.25, 0.5, 0.75))
    print(torque_values)
    interact_plot(model_interaction, pred = "Horsepower", modx = "Torque", at = list(Torque = torque_values, Year = "2009"), interval = FALSE, plot.points = FALSE, line.thickness = 1.5, modx.values = torque_values)

    ```

e.  Calculate $\hat{\beta}$from d.manually (without using `lm`) by first creating a proper design matrix, then using matrix algebra to estimate . Confirm that you get the same result as `lm` did prior.

    ```{r}
    # 1. Create the Design Matrix without the intercept 
    X <- model.matrix(MPG ~ Horsepower * Torque + Height + Length + Width + Year, data = data)

    # 2. Calculate Beta Hat
    y <- as.matrix(data$MPG)
    beta_hat <- solve(t(X) %*% X) %*% t(X) %*% y

    # Print the manually calculated coefficients
    print(beta_hat)

    # 3. Compare with lm results
    print(coef(model_interaction))


    ```

## **Problem 3 - Stata**

Repeat problem 2 parts a. through d. in Stata.

a\. rename

``` stata
. rename dimensionsheight height

. rename dimensionslength length

. rename dimensionswidth width

. rename engineinformationdriveline driveline

. rename engineinformationenginetype enginetype

. rename engineinformationhybrid hybrid

. rename engineinformationnumberofforward gears

. rename engineinformationtransmission transimission

. rename fuelinformationcitympg citympg

. rename fuelinformationfueltype fueltype

. rename fuelinformationhighwaympg highmpg

. rename identificationclassification class

. rename identificationid id

. rename identificationmake make

. rename identificationmodelyear model

. rename identificationyear year

. rename engineinformationenginestatistic horsepower

. rename v18 torque

. describe
```

b\. restrict "Gasoline"

``` stata
. keep if fueltype == "Gasoline"
(485 observations deleted)
```

c\. Fit a linear regression model

``` stata
. regress highmpg horsepower torque height length width i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(8, 4582)      =    413.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024

------------------------------------------------------------------------------
     highmpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .02082
      torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236
      height |   .0099079   .0011267     8.79   0.000      .007699    .0121168
      length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613
       width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388
             |
        year |
       2010  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342
       2011  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808
       2012  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093
------------------------------------------------------------------------------

```

d.Refit the model (with `lm`) and generate an interaction plot

``` stata
. regress highmpg c.horsepower##c.torque height length width i.year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(9, 4581)      =    480.07
       Model |  81105.8715         9  9011.76351   Prob > F        =    0.0000
    Residual |   85993.096     4,581  18.7716865   R-squared       =    0.4854
-------------+----------------------------------   Adj R-squared   =    0.4844
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.3326

---------------------------------------------------------------------------------------
              highmpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
----------------------+----------------------------------------------------------------
           horsepower |  -.0166633   .0025388    -6.56   0.000    -.0216406    -.011686
               torque |  -.0860593   .0025333   -33.97   0.000    -.0910257   -.0810928
                      |
c.horsepower#c.torque |   .0001124   4.63e-06    24.28   0.000     .0001033    .0001214
                      |
               height |   .0065604   .0010696     6.13   0.000     .0044634    .0086573
               length |   .0017767   .0008318     2.14   0.033     .0001459    .0034075
                width |  -.0011694   .0008521    -1.37   0.170      -.00284    .0005011
                      |
                 year |
                2010  |  -.5627858   .6371716    -0.88   0.377    -1.811949    .6863777
                2011  |   .0725356   .6361142     0.11   0.909    -1.174555    1.319626
                2012  |   1.197033   .6411085     1.87   0.062    -.0598488    2.453915
                      |
                _cons |   42.18795   .7930274    53.20   0.000     40.63323    43.74266
---------------------------------------------------------------------------------------

. 
```

``` stata
 sum torque, detail

         Engine Information.Engine Statistics.Torque
-------------------------------------------------------------
      Percentiles      Smallest
 1%          106             98
 5%          128             98
10%          148             98       Obs               4,591
25%          177             98       Sum of wgt.       4,591

50%          257                      Mean           267.2196
                        Largest       Std. dev.      101.3269
75%          332            738
90%          410            738       Variance       10267.13
95%          424            752       Skewness        .816285
99%          551            774       Kurtosis       4.114471

. 
. local tq_low = r(p25)

. local tq_med = r(p50)

. local tq_med = r(p50)
. 
. qui sum horsepower

. 
. local hp_min = r(min)

. 
. local hp_max = r(max)

. margins, at(horsepower=(`hp_min'(10)`hp_max') torque=(`tq_low' `tq_med' `tq_high'))

Predictive margins                                       Number of obs = 4,591
Model VCE: OLS

Expression: Linear prediction, predict()
1._at:   horsepower = 100
         torque     = 177
2._at:   horsepower = 100
         torque     = 257
3._at:   horsepower = 100
         torque     = 332
......
. marginsplot, noci scheme(s1color) name(graph1, replace)

Variables that uniquely identify margins: horsepower torque
```

![](images/截屏2023-09-26 上午4.07.48.png)

**Important**: Repeating part e. (manually estimating $\hat{\beta}$) in Stata is optional . You can choose to repeat e. for minor extra credit.
